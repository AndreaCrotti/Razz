RAZZ SIMULATION
#+OPTIONS: toc:nil num:nil
# Look in the bayesian formula to see how to get the probabilities correctly

* Problem
  Given an initial configuration (3 initial cards for player 1 and 1 for each other player) simulate a very large number of games. \\
  For every game get the rank obtained by player 1, where poker and flushes are discarded and the rank is computed with the rules of razz.

  For example running
#+begin_src sh
  ./razz 3 1 A 2 3
#+end_src
  Will run 10^3 simulations with only one player which has as initial cards Ace, 2 and 3.
  
This would be the output
#+begin_src sh
-1:	35
5:	77
6:	112
7:	138
8:	132
9:	159
10:	124
11:	103
12:	76
13:	44
#+end_src
  
* Implentation

** General considerations
   The most important thing to get a fast and well written program is to select the right data structure.
   We can consider those entities:
   - Card
     simply an integer, we don't need to keep track of the suit also.
   - Deck
     On a deck we must be able to
     + remove given cards (from 3 up to 10 in initialization phase only)
     + select and remove random cards (4 in simplified case up to 46 in the completely fair version)
     
     For this structure I chose a list/array, 52 Integers is really small and the access is always linear.
     Different considerations on sorting are done later

   - Hand
     A hand is simply a set of card that each player has in every stage of the game, we must be able to:
     + add cards
     + compute the rank
     
     Here I chose a dictionary, which maps every card to the number of occurrences in the hand.
     Adding a card is just a *dict[x]++* and ranking is also very fast.

** Python
   In python I didn't try to optimize as much as in C, because the code would be much less clean and I wouldn't still get comparable performances.

*** Deck
    The deck is a list of integers, we need to remove a list of cards from it and to extract random cards.
    Extraction is done picking one card with choice and removing it.
    It's still much faster than shuffling the deck every time.

#+begin_src python
c = choice(self.cards)
# check that I'm actually removing the first one
self.cards.remove(c)
#+end_src

*** Hand
    A hand is a dictionary \\
    [card : occurrences]
    Adding cards is straightforward and computing the rank is also very easy, we can simply
    - sort the keys (which represent the different cards present)
    - if they're less than necessary it's at least a couple and we discard it, otherwise we take the k_{th} card


** C
   C code is written in c99 standard (not ansi).
   To make C code run as fast as possible we should avoid every expansive operation, like allocation of data structures at every cycle.

*** Deck
    The deck is a structure containing:
    - array of cards
    - original length
    - current length

    To get a real simulation we should shuffle the whole deck at every game, but that's too expansive.
    Another way is picking random cards with a random index in the range of the length. \\
    To avoid picking the same card twice I shrink the array every time, swapping the selected card with the last one.

    For example: \\
    [1, 2, 4, 3] \\

    We pick index 1, so 2 must be extracted \\
    [1, 3, 4 | 2] \\
    
    We swapped 2 with 3 and decremented the actual length.

    Keeping the original deck as it is and just moving one index is very useful because to reset the deck we just need to put it back \\
    *deck->len = deck->orig\_len;*
    
*** Hand

*** Using random and lrand48 gives exactly the same result (while rand differs).    And lrand48 is the slowest, also avoid using the modulo, is slower and it only uses least significant bits.
    
* Testing
  I used [fn:1] for testing python code, it looks in the current directory and try to run all the tests that it finds.

* Timing/profiling

* Objectives
** Design a nice structure

** See how to run test units in many languages

** Compare the performances and the possibilities given

** Write a distributed version in erlang/python and see how they behaves

** Make it fast!
   A nice metric would be the
   #simulations / seconds
   The output could be equal for all the different languages and still parsable and analyzable automatically.

* Speed comparison

** Pure python

** Cython

** Pure C

* Links
  [[http://www.pokereagles.com/poker-rules/razz-rules.php][razz rules explained]]


* Footnotes

[fn:1] [[http://code.google.com/p/python-nose/][python nose]]
